1a2,3
> const util = require('util');
> const debug=false;
3a6
>   if(debug)console.log('\ncalcDepFlags', util.formatWithOptions({colors:true, depth:8, compact:1}, tree))
14,15c17,24
<     getChildren: (node, tree) =>
<       [...tree.edgesOut.values()].map(edge => edge.to),
---
>     leave(node){
>       if(debug)console.log('leave', util.formatWithOptions({colors:true, depth:3, compact:1}, node));
>     },
>     getChildren: (node, tree) =>{
>       let ret=[...tree.edgesOut.values()].map(edge => edge.to);
>       if(debug)console.log('getChildren', util.formatWithOptions({colors:true, depth:8, compact:1}, node))
>       return ret;
>     },
31a41,44
>   if(!node.target){
>     if(debug)console.log("node without target", node);
>   }
> 
33c46
<   if (node.isLink) {
---
>   if (node.isLink && node.target) {
103c116,119
<         if (node.isLink) {
---
>         if(!node.target){
>           if(debug)console.log("node without target", node);
>         }
>         if (node.isLink && node.target) {
107c123,125
<       getChildren: node => [...node.target.edgesOut.values()]
---
>       getChildren: node => {
>         if(!node.target)return [];
>         return [...node.target.edgesOut.values()]
110c128,129
<         .map(edge => edge.to),
---
>         .map(edge => edge.to)
>         },
