#include "HTMLTokenizer.pre.ts"
#include "from_cpp/VERIFY.cppts"
#include "edited_defines.cppts"

// '<'
#define TAG_START_TOKENS_1 this.m_queued_tokens.enqueue(HTMLToken.make_character('<'.charCodeAt(0))) ;
// '/'
#define TAG_START_TOKENS_2 this.m_queued_tokens.enqueue(HTMLToken.make_character('/'.charCodeAt(0))) ;

// open tag_name </
#define TAG_START_TOKENS_1_2 \
    TAG_START_TOKENS_1\
    TAG_START_TOKENS_2

#define ENUMERATE_TOKENIZER_STATES                                        \
    __ENUMERATE_TOKENIZER_STATE(Data)                                     \
    __ENUMERATE_TOKENIZER_STATE(RCDATA)                                   \
    __ENUMERATE_TOKENIZER_STATE(RAWTEXT)                                  \
    __ENUMERATE_TOKENIZER_STATE(ScriptData)                               \
    __ENUMERATE_TOKENIZER_STATE(PLAINTEXT)                                \
    __ENUMERATE_TOKENIZER_STATE(TagOpen)                                  \
    __ENUMERATE_TOKENIZER_STATE(EndTagOpen)                               \
    __ENUMERATE_TOKENIZER_STATE(TagName)                                  \
    __ENUMERATE_TOKENIZER_STATE(RCDATALessThanSign)                       \
    __ENUMERATE_TOKENIZER_STATE(RCDATAEndTagOpen)                         \
    __ENUMERATE_TOKENIZER_STATE(RCDATAEndTagName)                         \
    __ENUMERATE_TOKENIZER_STATE(RAWTEXTLessThanSign)                      \
    __ENUMERATE_TOKENIZER_STATE(RAWTEXTEndTagOpen)                        \
    __ENUMERATE_TOKENIZER_STATE(RAWTEXTEndTagName)                        \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataLessThanSign)                   \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEndTagOpen)                     \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEndTagName)                     \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEscapeStart)                    \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEscapeStartDash)                \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEscaped)                        \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEscapedDash)                    \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEscapedDashDash)                \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEscapedLessThanSign)            \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEscapedEndTagOpen)              \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataEscapedEndTagName)              \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataDoubleEscapeStart)              \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataDoubleEscaped)                  \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataDoubleEscapedDash)              \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataDoubleEscapedDashDash)          \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataDoubleEscapedLessThanSign)      \
    __ENUMERATE_TOKENIZER_STATE(ScriptDataDoubleEscapeEnd)                \
    __ENUMERATE_TOKENIZER_STATE(BeforeAttributeName)                      \
    __ENUMERATE_TOKENIZER_STATE(AttributeName)                            \
    __ENUMERATE_TOKENIZER_STATE(AfterAttributeName)                       \
    __ENUMERATE_TOKENIZER_STATE(BeforeAttributeValue)                     \
    __ENUMERATE_TOKENIZER_STATE(AttributeValueDoubleQuoted)               \
    __ENUMERATE_TOKENIZER_STATE(AttributeValueSingleQuoted)               \
    __ENUMERATE_TOKENIZER_STATE(AttributeValueUnquoted)                   \
    __ENUMERATE_TOKENIZER_STATE(AfterAttributeValueQuoted)                \
    __ENUMERATE_TOKENIZER_STATE(SelfClosingStartTag)                      \
    __ENUMERATE_TOKENIZER_STATE(BogusComment)                             \
    __ENUMERATE_TOKENIZER_STATE(MarkupDeclarationOpen)                    \
    __ENUMERATE_TOKENIZER_STATE(CommentStart)                             \
    __ENUMERATE_TOKENIZER_STATE(CommentStartDash)                         \
    __ENUMERATE_TOKENIZER_STATE(Comment)                                  \
    __ENUMERATE_TOKENIZER_STATE(CommentLessThanSign)                      \
    __ENUMERATE_TOKENIZER_STATE(CommentLessThanSignBang)                  \
    __ENUMERATE_TOKENIZER_STATE(CommentLessThanSignBangDash)              \
    __ENUMERATE_TOKENIZER_STATE(CommentLessThanSignBangDashDash)          \
    __ENUMERATE_TOKENIZER_STATE(CommentEndDash)                           \
    __ENUMERATE_TOKENIZER_STATE(CommentEnd)                               \
    __ENUMERATE_TOKENIZER_STATE(CommentEndBang)                           \
    __ENUMERATE_TOKENIZER_STATE(DOCTYPE)                                  \
    __ENUMERATE_TOKENIZER_STATE(BeforeDOCTYPEName)                        \
    __ENUMERATE_TOKENIZER_STATE(DOCTYPEName)                              \
    __ENUMERATE_TOKENIZER_STATE(AfterDOCTYPEName)                         \
    __ENUMERATE_TOKENIZER_STATE(AfterDOCTYPEPublicKeyword)                \
    __ENUMERATE_TOKENIZER_STATE(BeforeDOCTYPEPublicIdentifier)            \
    __ENUMERATE_TOKENIZER_STATE(DOCTYPEPublicIdentifierDoubleQuoted)      \
    __ENUMERATE_TOKENIZER_STATE(DOCTYPEPublicIdentifierSingleQuoted)      \
    __ENUMERATE_TOKENIZER_STATE(AfterDOCTYPEPublicIdentifier)             \
    __ENUMERATE_TOKENIZER_STATE(BetweenDOCTYPEPublicAndSystemIdentifiers) \
    __ENUMERATE_TOKENIZER_STATE(AfterDOCTYPESystemKeyword)                \
    __ENUMERATE_TOKENIZER_STATE(BeforeDOCTYPESystemIdentifier)            \
    __ENUMERATE_TOKENIZER_STATE(DOCTYPESystemIdentifierDoubleQuoted)      \
    __ENUMERATE_TOKENIZER_STATE(DOCTYPESystemIdentifierSingleQuoted)      \
    __ENUMERATE_TOKENIZER_STATE(AfterDOCTYPESystemIdentifier)             \
    __ENUMERATE_TOKENIZER_STATE(BogusDOCTYPE)                             \
    __ENUMERATE_TOKENIZER_STATE(CDATASection)                             \
    __ENUMERATE_TOKENIZER_STATE(CDATASectionBracket)                      \
    __ENUMERATE_TOKENIZER_STATE(CDATASectionEnd)                          \
    __ENUMERATE_TOKENIZER_STATE(CharacterReference)                       \
    __ENUMERATE_TOKENIZER_STATE(NamedCharacterReference)                  \
    __ENUMERATE_TOKENIZER_STATE(AmbiguousAmpersand)                       \
    __ENUMERATE_TOKENIZER_STATE(NumericCharacterReference)                \
    __ENUMERATE_TOKENIZER_STATE(HexadecimalCharacterReferenceStart)       \
    __ENUMERATE_TOKENIZER_STATE(DecimalCharacterReferenceStart)           \
    __ENUMERATE_TOKENIZER_STATE(HexadecimalCharacterReference)            \
    __ENUMERATE_TOKENIZER_STATE(DecimalCharacterReference)                \
    __ENUMERATE_TOKENIZER_STATE(NumericCharacterReferenceEnd)


#ifdef JS_MODE

#ifdef NO_ENABLED
// State class gen
#define __ENUMERATE_TOKENIZER_STATE(state)/** @readonly */ state=__COUNTER__;<line>
export class HTMLTokenizerIncH {
    static State=class State {
        /** @readonly */ InvalidState=__COUNTER__;
        ENUMERATE_TOKENIZER_STATES
    };
}
#undef __ENUMERATE_TOKENIZER_STATE
// GoToTargets gen
#define __ENUMERATE_TOKENIZER_STATE(state) #state|<line>
export type GoToTargets=
ENUMERATE_TOKENIZER_STATES
"None";
#undef __ENUMERATE_TOKENIZER_STATE

#endif

#endif


export class HTMLTokenizer extends HTMLTokenizerBase {
    m_goto_pos:"_StartOfFunction"|"None"="None";
    next_token():Optional<HTMLToken>
    {
        if (!this.m_source_positions.is_empty()) {
            let last_position = this.m_source_positions.last();
            this.m_source_positions.clear_with_capacity();
            this.m_source_positions.append(move(last_position));
        }
        let lp=0;
        let current_input_character;
        while(lp < 5) {
            lp++;

            _StartOfFunction: {
                if (!this.m_queued_tokens.is_empty())
                    return this.m_queued_tokens.dequeue().opt();

                if (this.m_aborted)
                    return new Optional;

                for (;;) {
                    current_input_character = this.next_code_point();
                    switch (this.m_state) {
                        // 13.2.5.1 Data state, https://html.spec.whatwg.org/multipage/parsing.html#data-state
                        BEGIN_STATE(Data)
                        {
                            ON('&'.charCodeAt(0))
                            {
                                this.m_return_state = State.Data;
                                SWITCH_TO(CharacterReference);
                            }
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO(TagOpen);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                EMIT_CURRENT_CHARACTER;
                            }
                            ON_EOF
                            {
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CURRENT_CHARACTER;
                            }
                        }
                        END_STATE

                        // 13.2.5.6 Tag open state, https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state
                        BEGIN_STATE(TagOpen)
                        {
                            ON('!'.charCodeAt(0))
                            {
                                SWITCH_TO(MarkupDeclarationOpen);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                SWITCH_TO(EndTagOpen);
                            }
                            ON_ASCII_ALPHA
                            {
                                this.create_new_token(HTMLToken.Type.StartTag);
                                RECONSUME_IN(TagName);
                            }
                            ON('?'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.create_new_token(HTMLToken.Type.Comment);
                                this.m_current_token.set_start_position("Badge_HTMLTokenizer", this.nth_last_position(2));
                                RECONSUME_IN(BogusComment);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                TAG_START_TOKENS_1
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                EMIT_CHARACTER_AND_RECONSUME_IN('<'.charCodeAt(0), Data);
                            }
                        }
                        END_STATE

                        // 13.2.5.8 Tag name state, https://html.spec.whatwg.org/multipage/parsing.html#tag-name-state
                        BEGIN_STATE(TagName)
                        {
                            ON_WHITESPACE
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                this.m_current_token.set_end_position("Badge<HTMLTokenizer>", this.nth_last_position(1));
                                SWITCH_TO(BeforeAttributeName);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                this.m_current_token.set_end_position("Badge<HTMLTokenizer>", this.nth_last_position(0));
                                SWITCH_TO(SelfClosingStartTag);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                this.m_current_token.set_end_position("Badge<HTMLTokenizer>", this.nth_last_position(1));
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_current_builder.append_code_point(this.to_ascii_lowercase(current_input_character.value()));
                                this.m_current_token.set_end_position("Badge<HTMLTokenizer>", this.nth_last_position(0));
                                continue;
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                this.m_current_token.set_end_position("Badge<HTMLTokenizer>", this.nth_last_position(0));
                                continue;
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.set_end_position("Badge<HTMLTokenizer>", this.nth_last_position(0));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                this.m_current_token.set_end_position("Badge<HTMLTokenizer>", this.nth_last_position(0));
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.7 End tag open state, https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state
                        BEGIN_STATE(EndTagOpen)
                        {
                            ON_ASCII_ALPHA
                            {
                                this.create_new_token(HTMLToken.Type.EndTag);
                                RECONSUME_IN(TagName);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                SWITCH_TO(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                TAG_START_TOKENS_1_2
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                this.create_new_token(HTMLToken.Type.Comment);
                                RECONSUME_IN(BogusComment);
                            }
                        }
                        END_STATE

                        // 13.2.5.42 Markup declaration open state, https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
                        BEGIN_STATE(MarkupDeclarationOpen)
                        {
                            DONT_CONSUME_NEXT_INPUT_CHARACTER;
                            if (this.consume_next_if_match("--")) {
                                this.create_new_token(HTMLToken.Type.Comment);
                                this.m_current_token.set_start_position("Badge_HTMLTokenizer", this.nth_last_position(3));
                                SWITCH_TO(CommentStart);
                            }
                            if (this.consume_next_if_match("DOCTYPE", CaseSensitivity.CaseInsensitive)) {
                                SWITCH_TO(DOCTYPE);
                            }
                            if (this.consume_next_if_match("[CDATA[")) {
                                // We keep the parser optional so that syntax highlighting can be lexer-only.
                                // The parser registers itself with the lexer it creates.
                                if (this.m_parser.is_not_null() && this.m_parser.deref().adjusted_current_node().namespace_() != Namespace.HTML) {
                                    SWITCH_TO(CDATASection);
                                } else {
                                    this.create_new_token(HTMLToken.Type.Comment);
                                    this.m_current_builder.append("[CDATA[");
                                    SWITCH_TO_WITH_UNCLEAN_BUILDER(BogusComment);
                                }
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                this.create_new_token(HTMLToken.Type.Comment);
                                SWITCH_TO(BogusComment);
                            }
                        }
                        END_STATE

                        // 13.2.5.41 Bogus comment state, https://html.spec.whatwg.org/multipage/parsing.html#bogus-comment-state
                        BEGIN_STATE(BogusComment)
                        {
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.set_comment(this.consume_current_builder());
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.53 DOCTYPE state, https://html.spec.whatwg.org/multipage/parsing.html#doctype-state
                        BEGIN_STATE(DOCTYPE)
                        {
                            ON_WHITESPACE
                            {
                                SWITCH_TO(BeforeDOCTYPEName);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                RECONSUME_IN(BeforeDOCTYPEName);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.create_new_token(HTMLToken.Type.DOCTYPE);
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                RECONSUME_IN(BeforeDOCTYPEName);
                            }
                        }
                        END_STATE

                        // 13.2.5.54 Before DOCTYPE name state, https://html.spec.whatwg.org/multipage/parsing.html#before-doctype-name-state
                        BEGIN_STATE(BeforeDOCTYPEName)
                        {
                            ON_WHITESPACE
                            {
                                continue;
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.create_new_token(HTMLToken.Type.DOCTYPE);
                                this.m_current_builder.append_code_point(this.to_ascii_lowercase(current_input_character.value()));
                                this.m_current_token.ensure_doctype_data().missing_name = false;
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(DOCTYPEName);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.create_new_token(HTMLToken.Type.DOCTYPE);
                                this.m_current_builder.append_code_point(0xFFFD);
                                this.m_current_token.ensure_doctype_data().missing_name = false;
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(DOCTYPEName);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.create_new_token(HTMLToken.Type.DOCTYPE);
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.create_new_token(HTMLToken.Type.DOCTYPE);
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.create_new_token(HTMLToken.Type.DOCTYPE);
                                this.m_current_builder.append_code_point(current_input_character.value());
                                this.m_current_token.ensure_doctype_data().missing_name = false;
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(DOCTYPEName);
                            }
                        }
                        END_STATE

                        // 13.2.5.55 DOCTYPE name state, https://html.spec.whatwg.org/multipage/parsing.html#doctype-name-state
                        BEGIN_STATE(DOCTYPEName)
                        {
                            ON_WHITESPACE
                            {
                                this.m_current_token.ensure_doctype_data().name = this.consume_current_builder();
                                SWITCH_TO(AfterDOCTYPEName);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().name = this.consume_current_builder();
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_current_builder.append_code_point(this.to_ascii_lowercase(current_input_character.value()));
                                continue;
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.56 After DOCTYPE name state, https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-name-state
                        BEGIN_STATE(AfterDOCTYPEName)
                        {
                            ON_WHITESPACE
                            {
                                continue;
                            }
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                if (this.to_ascii_uppercase(current_input_character.value()) == 'P'.charCodeAt(0) && this.consume_next_if_match("UBLIC", CaseSensitivity.CaseInsensitive)) {
                                    SWITCH_TO(AfterDOCTYPEPublicKeyword);
                                }
                                if (this.to_ascii_uppercase(current_input_character.value()) == 'S'.charCodeAt(0) && this.consume_next_if_match("YSTEM", CaseSensitivity.CaseInsensitive)) {
                                    SWITCH_TO(AfterDOCTYPESystemKeyword);
                                }
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                RECONSUME_IN(BogusDOCTYPE);
                            }
                        }
                        END_STATE

                        // 13.2.5.57 After DOCTYPE public keyword state, https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-public-keyword-state
                        BEGIN_STATE(AfterDOCTYPEPublicKeyword)
                        {
                            ON_WHITESPACE
                            {
                                SWITCH_TO(BeforeDOCTYPEPublicIdentifier);
                            }
                            ON('"'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().missing_public_identifier = false;
                                SWITCH_TO(DOCTYPEPublicIdentifierDoubleQuoted);
                            }
                            ON('\''.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().missing_public_identifier = false;
                                SWITCH_TO(DOCTYPEPublicIdentifierSingleQuoted);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                RECONSUME_IN(BogusDOCTYPE);
                            }
                        }
                        END_STATE

                        // 13.2.5.63 After DOCTYPE system keyword state, https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-system-keyword-state
                        BEGIN_STATE(AfterDOCTYPESystemKeyword)
                        {
                            ON_WHITESPACE
                            {
                                SWITCH_TO(BeforeDOCTYPESystemIdentifier);
                            }
                            ON('"'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().system_identifier = "";
                                this.m_current_token.ensure_doctype_data().missing_system_identifier = false;
                                SWITCH_TO(DOCTYPESystemIdentifierDoubleQuoted);
                            }
                            ON('\''.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().system_identifier = "";
                                this.m_current_token.ensure_doctype_data().missing_system_identifier = false;
                                SWITCH_TO(DOCTYPESystemIdentifierSingleQuoted);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                RECONSUME_IN(BogusDOCTYPE);
                            }
                        }
                        END_STATE

                        // 13.2.5.58 Before DOCTYPE public identifier state, https://html.spec.whatwg.org/multipage/parsing.html#before-doctype-public-identifier-state
                        BEGIN_STATE(BeforeDOCTYPEPublicIdentifier)
                        {
                            ON_WHITESPACE
                            {
                                continue;
                            }
                            ON('"'.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().missing_public_identifier = false;
                                SWITCH_TO(DOCTYPEPublicIdentifierDoubleQuoted);
                            }
                            ON('\''.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().missing_public_identifier = false;
                                SWITCH_TO(DOCTYPEPublicIdentifierSingleQuoted);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                RECONSUME_IN(BogusDOCTYPE);
                            }
                        }
                        END_STATE

                        // 13.2.5.64 Before DOCTYPE system identifier state, https://html.spec.whatwg.org/multipage/parsing.html#before-doctype-system-identifier-state
                        BEGIN_STATE(BeforeDOCTYPESystemIdentifier)
                        {
                            ON_WHITESPACE
                            {
                                continue;
                            }
                            ON('"'.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().missing_system_identifier = false;
                                SWITCH_TO(DOCTYPESystemIdentifierDoubleQuoted);
                            }
                            ON('\''.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().missing_system_identifier = false;
                                SWITCH_TO(DOCTYPESystemIdentifierSingleQuoted);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                RECONSUME_IN(BogusDOCTYPE);
                            }
                        }
                        END_STATE

                        // 13.2.5.59 DOCTYPE public identifier (double-quoted) state, https://html.spec.whatwg.org/multipage/parsing.html#doctype-public-identifier-(double-quoted)-state
                        BEGIN_STATE(DOCTYPEPublicIdentifierDoubleQuoted)
                        {
                            ON('"'.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().public_identifier = this.consume_current_builder();
                                SWITCH_TO(AfterDOCTYPEPublicIdentifier);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().public_identifier = this.consume_current_builder();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.60 DOCTYPE public identifier (single-quoted) state, https://html.spec.whatwg.org/multipage/parsing.html#doctype-public-identifier-(single-quoted)-state
                        BEGIN_STATE(DOCTYPEPublicIdentifierSingleQuoted)
                        {
                            ON('\''.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().public_identifier = this.consume_current_builder();
                                SWITCH_TO(AfterDOCTYPEPublicIdentifier);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().public_identifier = this.consume_current_builder();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.65 DOCTYPE system identifier (double-quoted) state, https://html.spec.whatwg.org/multipage/parsing.html#doctype-system-identifier-(double-quoted)-state
                        BEGIN_STATE(DOCTYPESystemIdentifierDoubleQuoted)
                        {
                            ON('"'.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().system_identifier = this.consume_current_builder();
                                SWITCH_TO(AfterDOCTYPESystemIdentifier);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().system_identifier = this.consume_current_builder();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.66 DOCTYPE system identifier (single-quoted) state, https://html.spec.whatwg.org/multipage/parsing.html#doctype-system-identifier-(single-quoted)-state
                        BEGIN_STATE(DOCTYPESystemIdentifierSingleQuoted)
                        {
                            ON('\''.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().system_identifier = this.consume_current_builder();
                                SWITCH_TO(AfterDOCTYPESystemIdentifier);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().system_identifier = this.consume_current_builder();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.61 After DOCTYPE public identifier state, https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-public-identifier-state
                        BEGIN_STATE(AfterDOCTYPEPublicIdentifier)
                        {
                            ON_WHITESPACE
                            {
                                SWITCH_TO(BetweenDOCTYPEPublicAndSystemIdentifiers);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON('"'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().missing_system_identifier = false;
                                SWITCH_TO(DOCTYPESystemIdentifierDoubleQuoted);
                            }
                            ON('\''.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().missing_system_identifier = false;
                                SWITCH_TO(DOCTYPESystemIdentifierSingleQuoted);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                RECONSUME_IN(BogusDOCTYPE);
                            }
                        }
                        END_STATE

                        // 13.2.5.62 Between DOCTYPE public and system identifiers state, https://html.spec.whatwg.org/multipage/parsing.html#between-doctype-public-and-system-identifiers-state
                        BEGIN_STATE(BetweenDOCTYPEPublicAndSystemIdentifiers)
                        {
                            ON_WHITESPACE
                            {
                                continue;
                            }
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON('"'.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().missing_system_identifier = false;
                                SWITCH_TO(DOCTYPESystemIdentifierDoubleQuoted);
                            }
                            ON('\''.charCodeAt(0))
                            {
                                this.m_current_token.ensure_doctype_data().missing_system_identifier = false;
                                SWITCH_TO(DOCTYPESystemIdentifierSingleQuoted);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                RECONSUME_IN(BogusDOCTYPE);
                            }
                        }
                        END_STATE

                        // 13.2.5.67 After DOCTYPE system identifier state, https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-system-identifier-state
                        BEGIN_STATE(AfterDOCTYPESystemIdentifier)
                        {
                            ON_WHITESPACE
                            {
                                continue;
                            }
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.ensure_doctype_data().force_quirks = true;
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                RECONSUME_IN(BogusDOCTYPE);
                            }
                        }
                        END_STATE

                        // 13.2.5.68 Bogus DOCTYPE state, https://html.spec.whatwg.org/multipage/parsing.html#bogus-doctype-state
                        BEGIN_STATE(BogusDOCTYPE)
                        {
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                continue;
                            }
                            ON_EOF
                            {
                                this.m_queued_tokens.enqueue(move(this.m_current_token));
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.32 Before attribute name state, https://html.spec.whatwg.org/multipage/parsing.html#before-attribute-name-state
                        BEGIN_STATE(BeforeAttributeName)
                        {
                            ON_WHITESPACE
                            {
                                continue;
                            }
                            ON('/'.charCodeAt(0))
                            {
                                if (this.m_current_token.has_attributes())
                                    this.m_current_token.last_attribute().name_end_position = this.nth_last_position(1);
                                RECONSUME_IN(AfterAttributeName);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                RECONSUME_IN(AfterAttributeName);
                            }
                            ON_EOF
                            {
                                RECONSUME_IN(AfterAttributeName);
                            }
                            ON('='.charCodeAt(0))
                            {
                                this.log_parse_error();
                                let new_attribute=new HTMLToken.Attribute;
                                new_attribute.name_start_position = this.nth_last_position(1);
                                this.m_current_builder.append_code_point(current_input_character.value());
                                this.m_current_token.add_attribute(move(new_attribute));
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(AttributeName);
                            }
                            ANYTHING_ELSE
                            {
                                let new_attribute=new HTMLToken.Attribute;
                                new_attribute.name_start_position = this.nth_last_position(1);
                                this.m_current_token.add_attribute(move(new_attribute));
                                RECONSUME_IN(AttributeName);
                            }
                        }
                        END_STATE

                        // 13.2.5.40 Self-closing start tag state, https://html.spec.whatwg.org/multipage/parsing.html#self-closing-start-tag-state
                        BEGIN_STATE(SelfClosingStartTag)
                        {
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.set_self_closing(true);
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                RECONSUME_IN(BeforeAttributeName);
                            }
                        }
                        END_STATE

                        // 13.2.5.33 Attribute name state, https://html.spec.whatwg.org/multipage/parsing.html#attribute-name-state
                        BEGIN_STATE(AttributeName)
                        {
                            ON_WHITESPACE
                            {
                                this.m_current_token.last_attribute().local_name = this.consume_current_builder();
                                RECONSUME_IN(AfterAttributeName);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                this.m_current_token.last_attribute().local_name = this.consume_current_builder();
                                RECONSUME_IN(AfterAttributeName);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.last_attribute().local_name = this.consume_current_builder();
                                RECONSUME_IN(AfterAttributeName);
                            }
                            ON_EOF
                            {
                                this.m_current_token.last_attribute().local_name = this.consume_current_builder();
                                RECONSUME_IN(AfterAttributeName);
                            }
                            ON('='.charCodeAt(0))
                            {
                                this.m_current_token.last_attribute().name_end_position = this.nth_last_position(1);
                                this.m_current_token.last_attribute().local_name = this.consume_current_builder();
                                SWITCH_TO(BeforeAttributeValue);
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_current_builder.append_code_point(this.to_ascii_lowercase(current_input_character.value()));
                                continue;
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON('"'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_goto_target="AnythingElseAttributeName";
                                break _StartOfFunction;
                            }
                            ON('\''.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_goto_target="AnythingElseAttributeName";
                                break _StartOfFunction;
                            }
                            ON('<'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_goto_target="AnythingElseAttributeName";
                                break _StartOfFunction;
                            }
                            ANYTHING_ELSE
                            {
                            AnythingElseAttributeName:
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.34 After attribute name state, https://html.spec.whatwg.org/multipage/parsing.html#after-attribute-name-state
                        BEGIN_STATE(AfterAttributeName)
                        {
                            ON_WHITESPACE
                            {
                                continue;
                            }
                            ON('/'.charCodeAt(0))
                            {
                                SWITCH_TO(SelfClosingStartTag);
                            }
                            ON('='.charCodeAt(0))
                            {
                                this.m_current_token.last_attribute().name_end_position = this.nth_last_position(1);
                                SWITCH_TO(BeforeAttributeValue);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_token.add_attribute(new HTMLToken.Attribute);
                                if (!this.m_source_positions.is_empty())
                                    this.m_current_token.last_attribute().name_start_position = this.m_source_positions.last();
                                RECONSUME_IN(AttributeName);
                            }
                        }
                        END_STATE

                        // 13.2.5.35 Before attribute value state, https://html.spec.whatwg.org/multipage/parsing.html#before-attribute-value-state
                        BEGIN_STATE(BeforeAttributeValue)
                        {
                            this.m_current_token.last_attribute().value_start_position = this.nth_last_position(1);
                            ON_WHITESPACE
                            {
                                continue;
                            }
                            ON('"'.charCodeAt(0))
                            {
                                SWITCH_TO(AttributeValueDoubleQuoted);
                            }
                            ON('\''.charCodeAt(0))
                            {
                                SWITCH_TO(AttributeValueSingleQuoted);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(AttributeValueUnquoted);
                            }
                        }
                        END_STATE

                        // 13.2.5.36 Attribute value (double-quoted) state, https://html.spec.whatwg.org/multipage/parsing.html#attribute-value-(double-quoted)-state
                        BEGIN_STATE(AttributeValueDoubleQuoted)
                        {
                            ON('"'.charCodeAt(0))
                            {
                                this.m_current_token.last_attribute().value = this.consume_current_builder();
                                SWITCH_TO(AfterAttributeValueQuoted);
                            }
                            ON('&'.charCodeAt(0))
                            {
                                this.m_return_state = State.AttributeValueDoubleQuoted;
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CharacterReference);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.37 Attribute value (single-quoted) state, https://html.spec.whatwg.org/multipage/parsing.html#attribute-value-(single-quoted)-state
                        BEGIN_STATE(AttributeValueSingleQuoted)
                        {
                            ON('\''.charCodeAt(0))
                            {
                                this.m_current_token.last_attribute().value = this.consume_current_builder();
                                SWITCH_TO(AfterAttributeValueQuoted);
                            }
                            ON('&'.charCodeAt(0))
                            {
                                this.m_return_state = State.AttributeValueSingleQuoted;
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CharacterReference);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.38 Attribute value (unquoted) state, https://html.spec.whatwg.org/multipage/parsing.html#attribute-value-(single-quoted)-state
                        BEGIN_STATE(AttributeValueUnquoted)
                        {
                            ON_WHITESPACE
                            {
                                this.m_current_token.last_attribute().value = this.consume_current_builder();
                                this.m_current_token.last_attribute().value_end_position = this.nth_last_position(1);
                                SWITCH_TO(BeforeAttributeName);
                            }
                            ON('&'.charCodeAt(0))
                            {
                                this.m_return_state = State.AttributeValueUnquoted;
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CharacterReference);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.last_attribute().value = this.consume_current_builder();
                                this.m_current_token.last_attribute().value_end_position = this.nth_last_position(1);
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON('"'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                            ON('\''.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                            ON('<'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                            ON('='.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                            ON('`'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.39 After attribute value (quoted) state, https://html.spec.whatwg.org/multipage/parsing.html#after-attribute-value-(quoted)-state
                        BEGIN_STATE(AfterAttributeValueQuoted)
                        {
                            this.m_current_token.last_attribute().value_end_position = this.nth_last_position(1);
                            ON_WHITESPACE
                            {
                                SWITCH_TO(BeforeAttributeName);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                SWITCH_TO(SelfClosingStartTag);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                RECONSUME_IN(BeforeAttributeName);
                            }
                        }
                        END_STATE

                        // 13.2.5.43 Comment start state, https://html.spec.whatwg.org/multipage/parsing.html#comment-start-state
                        BEGIN_STATE(CommentStart)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO(CommentStartDash);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(Comment);
                            }
                        }
                        END_STATE

                        // 13.2.5.44 Comment start dash state, https://html.spec.whatwg.org/multipage/parsing.html#comment-start-dash-state
                        BEGIN_STATE(CommentStartDash)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO(CommentEnd);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append('-'.charCodeAt(0));
                                RECONSUME_IN(Comment);
                            }
                        }
                        END_STATE

                        // 13.2.5.45 Comment state, https://html.spec.whatwg.org/multipage/parsing.html#comment-state
                        BEGIN_STATE(Comment)
                        {
                            ON('<'.charCodeAt(0))
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CommentLessThanSign);
                            }
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CommentEndDash);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                this.m_current_builder.append_code_point(0xFFFD);
                                continue;
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.set_comment(this.consume_current_builder());
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                        }
                        END_STATE

                        // 13.2.5.51 Comment end state, https://html.spec.whatwg.org/multipage/parsing.html#comment-end-state
                        BEGIN_STATE(CommentEnd)
                        {
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.set_comment(this.consume_current_builder());
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON('!'.charCodeAt(0))
                            {
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CommentEndBang);
                            }
                            ON('-'.charCodeAt(0))
                            {
                                this.m_current_builder.append('-'.charCodeAt(0));
                                continue;
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.set_comment(this.consume_current_builder());
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append("--");
                                RECONSUME_IN(Comment);
                            }
                        }
                        END_STATE

                        // 13.2.5.52 Comment end bang state, https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state
                        BEGIN_STATE(CommentEndBang)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                this.m_current_builder.append("--!");
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CommentEndDash);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                this.m_current_token.set_comment(this.consume_current_builder());
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.set_comment(this.consume_current_builder());
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append("--!");
                                RECONSUME_IN(Comment);
                            }
                        }
                        END_STATE

                        // 13.2.5.50 Comment end dash state, https://html.spec.whatwg.org/multipage/parsing.html#comment-end-dash-state
                        BEGIN_STATE(CommentEndDash)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CommentEnd);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                this.m_current_token.set_comment(this.consume_current_builder());
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                this.m_current_builder.append('-'.charCodeAt(0));
                                RECONSUME_IN(Comment);
                            }
                        }
                        END_STATE

                        // 13.2.5.46 Comment less-than sign state, https://html.spec.whatwg.org/multipage/parsing.html#comment-less-than-sign-state
                        BEGIN_STATE(CommentLessThanSign)
                        {
                            ON('!'.charCodeAt(0))
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CommentLessThanSignBang);
                            }
                            ON('<'.charCodeAt(0))
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                continue;
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(Comment);
                            }
                        }
                        END_STATE

                        // 13.2.5.47 Comment less-than sign bang state, https://html.spec.whatwg.org/multipage/parsing.html#comment-less-than-sign-bang-state
                        BEGIN_STATE(CommentLessThanSignBang)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CommentLessThanSignBangDash);
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(Comment);
                            }
                        }
                        END_STATE

                        // 13.2.5.48 Comment less-than sign bang dash state, https://html.spec.whatwg.org/multipage/parsing.html#comment-less-than-sign-bang-dash-state
                        BEGIN_STATE(CommentLessThanSignBangDash)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(CommentLessThanSignBangDashDash);
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(CommentEndDash);
                            }
                        }
                        END_STATE

                        // 13.2.5.49 Comment less-than sign bang dash dash state, https://html.spec.whatwg.org/multipage/parsing.html#comment-less-than-sign-bang-dash-dash-state
                        BEGIN_STATE(CommentLessThanSignBangDashDash)
                        {
                            ON('>'.charCodeAt(0))
                            {
                                RECONSUME_IN(CommentEnd);
                            }
                            ON_EOF
                            {
                                RECONSUME_IN(CommentEnd);
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                RECONSUME_IN(CommentEnd);
                            }
                        }
                        END_STATE

                        // 13.2.5.72 Character reference state, https://html.spec.whatwg.org/multipage/parsing.html#character-reference-state
                        BEGIN_STATE(CharacterReference)
                        {
                            this.m_temporary_buffer.clear();
                            this.m_temporary_buffer.append('&'.charCodeAt(0));

                            ON_ASCII_ALPHANUMERIC
                            {
                                RECONSUME_IN(NamedCharacterReference);
                            }
                            ON('#'.charCodeAt(0))
                            {
                                this.m_temporary_buffer.append(current_input_character.value());
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(NumericCharacterReference);
                            }
                            ANYTHING_ELSE
                            {
                                FLUSH_CODEPOINTS_CONSUMED_AS_A_CHARACTER_REFERENCE;
                                RECONSUME_IN_RETURN_STATE;
                            }
                        }
                        END_STATE

                        // 13.2.5.73 Named character reference state, https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
                        BEGIN_STATE(NamedCharacterReference)
                        {
                            let byte_offset = this.m_utf8_view.byte_offset_of(this.m_prev_utf8_iterator);

                            let match = HTML.code_points_from_entity(this.m_decoded_input.substring_view(byte_offset, this.m_decoded_input.length() - byte_offset));

                            if (match.has_value()) {
                                this.skip(match.deref().entity.length() - 1);
                                for (let ch of match.value().entity)
                                    this.m_temporary_buffer.append(ch);

                                if (this.consumed_as_part_of_an_attribute() && !match.value().entity.ends_with(';')) {
                                    let next_code_point = this.peek_code_point(0);
                                    if (next_code_point.has_value() && (next_code_point.value() == '='.charCodeAt(0) || this.is_ascii_alphanumeric(next_code_point.value()))) {
                                        FLUSH_CODEPOINTS_CONSUMED_AS_A_CHARACTER_REFERENCE;
                                        SWITCH_TO_RETURN_STATE;
                                    }
                                }

                                if (!match.value().entity.ends_with(';')) {
                                    this.log_parse_error();
                                }

                                this.m_temporary_buffer = match.value().code_points;

                                FLUSH_CODEPOINTS_CONSUMED_AS_A_CHARACTER_REFERENCE;
                                SWITCH_TO_RETURN_STATE;
                            } else {
                                FLUSH_CODEPOINTS_CONSUMED_AS_A_CHARACTER_REFERENCE;
                                // FIXME: This should be SWITCH_TO, but we always lose the first character on this path, so just reconsume it.
                                //        I can't wrap my head around how to do it as the spec says.
                                RECONSUME_IN(AmbiguousAmpersand);
                            }
                        }
                        END_STATE

                        // 13.2.5.74 Ambiguous ampersand state, https://html.spec.whatwg.org/multipage/parsing.html#ambiguous-ampersand-state
                        BEGIN_STATE(AmbiguousAmpersand)
                        {
                            ON_ASCII_ALPHANUMERIC
                            {
                                if (this.consumed_as_part_of_an_attribute()) {
                                    this.m_current_builder.append_code_point(current_input_character.value());
                                    continue;
                                } else {
                                    EMIT_CURRENT_CHARACTER;
                                }
                            }
                            ON(';'.charCodeAt(0))
                            {
                                this.log_parse_error();
                                RECONSUME_IN_RETURN_STATE;
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN_RETURN_STATE;
                            }
                        }
                        END_STATE

                        // 13.2.5.75 Numeric character reference state, https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-state
                        BEGIN_STATE(NumericCharacterReference)
                        {
                            this.m_character_reference_code = 0;

                            ON('X'.charCodeAt(0))
                            {
                                this.m_temporary_buffer.append(current_input_character.value());
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(HexadecimalCharacterReferenceStart);
                            }
                            ON('x'.charCodeAt(0))
                            {
                                this.m_temporary_buffer.append(current_input_character.value());
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(HexadecimalCharacterReferenceStart);
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(DecimalCharacterReferenceStart);
                            }
                        }
                        END_STATE

                        // 13.2.5.76 Hexadecimal character reference start state, https://html.spec.whatwg.org/multipage/parsing.html#hexadecimal-character-reference-start-state
                        BEGIN_STATE(HexadecimalCharacterReferenceStart)
                        {
                            ON_ASCII_HEX_DIGIT
                            {
                                RECONSUME_IN(HexadecimalCharacterReference);
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                FLUSH_CODEPOINTS_CONSUMED_AS_A_CHARACTER_REFERENCE;
                                RECONSUME_IN_RETURN_STATE;
                            }
                        }
                        END_STATE

                        // 13.2.5.77 Decimal character reference start state, https://html.spec.whatwg.org/multipage/parsing.html#decimal-character-reference-start-state
                        BEGIN_STATE(DecimalCharacterReferenceStart)
                        {
                            ON_ASCII_DIGIT
                            {
                                RECONSUME_IN(DecimalCharacterReference);
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                FLUSH_CODEPOINTS_CONSUMED_AS_A_CHARACTER_REFERENCE;
                                RECONSUME_IN_RETURN_STATE;
                            }
                        }
                        END_STATE

                        // 13.2.5.78 Hexadecimal character reference state, https://html.spec.whatwg.org/multipage/parsing.html#decimal-character-reference-start-state
                        BEGIN_STATE(HexadecimalCharacterReference)
                        {
                            ON_ASCII_DIGIT
                            {
                                this.m_character_reference_code *= 16;
                                this.m_character_reference_code += current_input_character.value() - 0x30;
                                continue;
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_character_reference_code *= 16;
                                this.m_character_reference_code += current_input_character.value() - 0x37;
                                continue;
                            }
                            ON_ASCII_LOWER_ALPHA
                            {
                                this.m_character_reference_code *= 16;
                                this.m_character_reference_code += current_input_character.value() - 0x57;
                                continue;
                            }
                            ON(';'.charCodeAt(0))
                            {
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(NumericCharacterReferenceEnd);
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                RECONSUME_IN(NumericCharacterReferenceEnd);
                            }
                        }
                        END_STATE

                        // 13.2.5.79 Decimal character reference state, https://html.spec.whatwg.org/multipage/parsing.html#decimal-character-reference-state
                        BEGIN_STATE(DecimalCharacterReference)
                        {
                            ON_ASCII_DIGIT
                            {
                                this.m_character_reference_code *= 10;
                                this.m_character_reference_code += current_input_character.value() - 0x30;
                                continue;
                            }
                            ON(';'.charCodeAt(0))
                            {
                                SWITCH_TO_WITH_UNCLEAN_BUILDER(NumericCharacterReferenceEnd);
                            }
                            ANYTHING_ELSE
                            {
                                this.log_parse_error();
                                RECONSUME_IN(NumericCharacterReferenceEnd);
                            }
                        }
                        END_STATE

                        // 13.2.5.80 Numeric character reference end state, https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state
                        BEGIN_STATE(NumericCharacterReferenceEnd)
                        {
                            DONT_CONSUME_NEXT_INPUT_CHARACTER;

                            if (this.m_character_reference_code == 0) {
                                this.log_parse_error();
                                this.m_character_reference_code = 0xFFFD;
                            }
                            if (this.m_character_reference_code > 0x10ffff) {
                                this.log_parse_error();
                                this.m_character_reference_code = 0xFFFD;
                            }
                            if (this.is_unicode_surrogate(this.m_character_reference_code)) {
                                this.log_parse_error();
                                this.m_character_reference_code = 0xFFFD;
                            }
                            if (this.is_unicode_noncharacter(this.m_character_reference_code)) {
                                this.log_parse_error();
                            }
                            if (this.m_character_reference_code == 0xd || (this.is_unicode_control(this.m_character_reference_code) && !this.is_ascii_space(this.m_character_reference_code))) {
                                this.log_parse_error();
                                class X {
                                    number: number;
                                    code_point: number;
                                    constructor(a: number,b: number) {
                                        this.number=a;
                                        this.code_point=b;
                                    }
                                };
                                let conversion_table = [
                                    new X(0x80,0x20AC),
                                    new X(0x82,0x201A),
                                    new X(0x83,0x0192),
                                    new X(0x84,0x201E),
                                    new X(0x85,0x2026),
                                    new X(0x86,0x2020),
                                    new X(0x87,0x2021),
                                    new X(0x88,0x02C6),
                                    new X(0x89,0x2030),
                                    new X(0x8A,0x0160),
                                    new X(0x8B,0x2039),
                                    new X(0x8C,0x0152),
                                    new X(0x8E,0x017D),
                                    new X(0x91,0x2018),
                                    new X(0x92,0x2019),
                                    new X(0x93,0x201C),
                                    new X(0x94,0x201D),
                                    new X(0x95,0x2022),
                                    new X(0x96,0x2013),
                                    new X(0x97,0x2014),
                                    new X(0x98,0x02DC),
                                    new X(0x99,0x2122),
                                    new X(0x9A,0x0161),
                                    new X(0x9B,0x203A),
                                    new X(0x9C,0x0153),
                                    new X(0x9E,0x017E),
                                    new X(0x9F,0x0178),
                                ];
                                for (let entry of conversion_table) {
                                    if (this.m_character_reference_code == entry.number) {
                                        this.m_character_reference_code = entry.code_point;
                                        break;
                                    }
                                }
                            }

                            this.m_temporary_buffer.clear();
                            this.m_temporary_buffer.append(this.m_character_reference_code);
                            FLUSH_CODEPOINTS_CONSUMED_AS_A_CHARACTER_REFERENCE;
                            SWITCH_TO_RETURN_STATE;
                        }
                        END_STATE

                        // 13.2.5.2 RCDATA state, https://html.spec.whatwg.org/multipage/parsing.html#rcdata-state
                        BEGIN_STATE(RCDATA)
                        {
                            ON('&'.charCodeAt(0))
                            {
                                this.m_return_state = State.RCDATA;
                                SWITCH_TO(CharacterReference);
                            }
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO(RCDATALessThanSign);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                EMIT_CHARACTER(0xFFFD);
                            }
                            ON_EOF
                            {
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CURRENT_CHARACTER;
                            }
                        }
                        END_STATE

                        // 13.2.5.9 RCDATA less-than sign state, https://html.spec.whatwg.org/multipage/parsing.html#rcdata-less-than-sign-state
                        BEGIN_STATE(RCDATALessThanSign)
                        {
                            ON('/'.charCodeAt(0))
                            {
                                this.m_temporary_buffer.clear();
                                SWITCH_TO(RCDATAEndTagOpen);
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CHARACTER_AND_RECONSUME_IN('<'.charCodeAt(0), RCDATA);
                            }
                        }
                        END_STATE

                        // 13.2.5.10 RCDATA end tag open state, https://html.spec.whatwg.org/multipage/parsing.html#rcdata-end-tag-open-state
                        BEGIN_STATE(RCDATAEndTagOpen)
                        {
                            ON_ASCII_ALPHA
                            {
                                this.create_new_token(HTMLToken.Type.EndTag);
                                RECONSUME_IN(RCDATAEndTagName);
                            }
                            ANYTHING_ELSE
                            {
                                TAG_START_TOKENS_1_2
                                RECONSUME_IN(RCDATA);
                            }
                        }
                        END_STATE

                        // 13.2.5.11 RCDATA end tag name state, https://html.spec.whatwg.org/multipage/parsing.html#rcdata-end-tag-name-state
                        BEGIN_STATE(RCDATAEndTagName)
                        {
                            ON_WHITESPACE
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (!this.current_end_tag_token_is_appropriate()) {
                                    TAG_START_TOKENS_1_2
                                    for (let code_point of this.m_temporary_buffer)
                                        this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                    RECONSUME_IN(RCDATA);
                                }
                                SWITCH_TO(BeforeAttributeName);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (!this.current_end_tag_token_is_appropriate()) {
                                    TAG_START_TOKENS_1_2
                                    for (let code_point of this.m_temporary_buffer)
                                        this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                    RECONSUME_IN(RCDATA);
                                }
                                SWITCH_TO(SelfClosingStartTag);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (!this.current_end_tag_token_is_appropriate()) {
                                    TAG_START_TOKENS_1_2
                                    for (let code_point of this.m_temporary_buffer)
                                        this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                    RECONSUME_IN(RCDATA);
                                }
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_current_builder.append_code_point(this.to_ascii_lowercase(current_input_character.value()));
                                this.m_temporary_buffer.append(current_input_character.value());
                                continue;
                            }
                            ON_ASCII_LOWER_ALPHA
                            {
                                this.m_current_builder.append_code_point(current_input_character.value());
                                this.m_temporary_buffer.append(current_input_character.value());
                                continue;
                            }
                            ANYTHING_ELSE
                            {
                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer)
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                RECONSUME_IN(RCDATA);
                            }
                        }
                        END_STATE

                        // 13.2.5.3 RAWTEXT state, https://html.spec.whatwg.org/multipage/parsing.html#rawtext-state
                        BEGIN_STATE(RAWTEXT)
                        {
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO(RAWTEXTLessThanSign);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                EMIT_CHARACTER(0xFFFD);
                            }
                            ON_EOF
                            {
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CURRENT_CHARACTER;
                            }
                        }
                        END_STATE

                        // 13.2.5.12 RAWTEXT less-than sign state, https://html.spec.whatwg.org/multipage/parsing.html#rawtext-less-than-sign-state
                        BEGIN_STATE(RAWTEXTLessThanSign)
                        {
                            ON('/'.charCodeAt(0))
                            {
                                this.m_temporary_buffer.clear();
                                SWITCH_TO(RAWTEXTEndTagOpen);
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CHARACTER_AND_RECONSUME_IN('<'.charCodeAt(0), RAWTEXT);
                            }
                        }
                        END_STATE

                        // 13.2.5.13 RAWTEXT end tag open state, https://html.spec.whatwg.org/multipage/parsing.html#rawtext-end-tag-open-state
                        BEGIN_STATE(RAWTEXTEndTagOpen)
                        {
                            ON_ASCII_ALPHA
                            {
                                this.create_new_token(HTMLToken.Type.EndTag);
                                RECONSUME_IN(RAWTEXTEndTagName);
                            }
                            ANYTHING_ELSE
                            {
                                TAG_START_TOKENS_1_2
                                RECONSUME_IN(RAWTEXT);
                            }
                        }
                        END_STATE

                        // 13.2.5.14 RAWTEXT end tag name state, https://html.spec.whatwg.org/multipage/parsing.html#rawtext-end-tag-name-state
                        BEGIN_STATE(RAWTEXTEndTagName)
                        {
                            ON_WHITESPACE
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (!this.current_end_tag_token_is_appropriate()) {
                                    TAG_START_TOKENS_1_2
                                    for (let code_point of this.m_temporary_buffer)
                                        this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                    RECONSUME_IN(RAWTEXT);
                                }
                                SWITCH_TO(BeforeAttributeName);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (!this.current_end_tag_token_is_appropriate()) {
                                    TAG_START_TOKENS_1_2
                                    for (let code_point of this.m_temporary_buffer)
                                        this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                    RECONSUME_IN(RAWTEXT);
                                }
                                SWITCH_TO(SelfClosingStartTag);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (!this.current_end_tag_token_is_appropriate()) {
                                    TAG_START_TOKENS_1_2
                                    for (let code_point of this.m_temporary_buffer)
                                        this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                    RECONSUME_IN(RAWTEXT);
                                }
                                SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_current_builder.append_code_point(this.to_ascii_lowercase(current_input_character.value()));
                                this.m_temporary_buffer.append(current_input_character.value());
                                continue;
                            }
                            ON_ASCII_LOWER_ALPHA
                            {
                                this.m_current_builder.append(current_input_character.value());
                                this.m_temporary_buffer.append(current_input_character.value());
                                continue;
                            }
                            ANYTHING_ELSE
                            {
                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer)
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                RECONSUME_IN(RAWTEXT);
                            }
                        }
                        END_STATE

                        // 13.2.5.4 Script data state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-state
                        BEGIN_STATE(ScriptData)
                        {
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO(ScriptDataLessThanSign);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                EMIT_CHARACTER(0xFFFD);
                            }
                            ON_EOF
                            {
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CURRENT_CHARACTER;
                            }
                        }
                        END_STATE

                        // 13.2.5.5 PLAINTEXT state, https://html.spec.whatwg.org/multipage/parsing.html#plaintext-state
                        BEGIN_STATE(PLAINTEXT)
                        {
                            ON(0)
                            {
                                this.log_parse_error();
                                EMIT_CHARACTER(0xFFFD);
                            }
                            ON_EOF
                            {
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CURRENT_CHARACTER;
                            }
                        }
                        END_STATE

                        // 13.2.5.15 Script data less-than sign state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-less-than-sign-state
                        BEGIN_STATE(ScriptDataLessThanSign)
                        {
                            ON('/'.charCodeAt(0))
                            {
                                this.m_temporary_buffer.clear();
                                SWITCH_TO(ScriptDataEndTagOpen);
                            }
                            ON('!'.charCodeAt(0))
                            {
                                TAG_START_TOKENS_1
                                this.m_queued_tokens.enqueue(HTMLToken.make_character('!'.charCodeAt(0)));
                                SWITCH_TO(ScriptDataEscapeStart);
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CHARACTER_AND_RECONSUME_IN('<'.charCodeAt(0), ScriptData);
                            }
                        }
                        END_STATE

                        // 13.2.5.18 Script data escape start state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-escape-start-state
                        BEGIN_STATE(ScriptDataEscapeStart)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('-'.charCodeAt(0), ScriptDataEscapeStartDash);
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(ScriptData);
                            }
                        }
                        END_STATE

                        // 13.2.5.19 Script data escape start dash state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-escape-start-dash-state
                        BEGIN_STATE(ScriptDataEscapeStartDash)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('-'.charCodeAt(0), ScriptDataEscapedDashDash);
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(ScriptData);
                            }
                        }
                        END_STATE

                        // 13.2.5.22 Script data escaped dash dash state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-dash-dash-state
                        BEGIN_STATE(ScriptDataEscapedDashDash)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                EMIT_CHARACTER('-'.charCodeAt(0));
                            }
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO(ScriptDataEscapedLessThanSign);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('>'.charCodeAt(0), ScriptData);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                SWITCH_TO_AND_EMIT_CHARACTER(0xFFFD, ScriptDataEscaped);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.23 Script data escaped less-than sign state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-less-than-sign-state
                        BEGIN_STATE(ScriptDataEscapedLessThanSign)
                        {
                            ON('/'.charCodeAt(0))
                            {
                                this.m_temporary_buffer.clear();
                                SWITCH_TO(ScriptDataEscapedEndTagOpen);
                            }
                            ON_ASCII_ALPHA
                            {
                                this.m_temporary_buffer.clear();
                                EMIT_CHARACTER_AND_RECONSUME_IN('<'.charCodeAt(0), ScriptDataDoubleEscapeStart);
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CHARACTER_AND_RECONSUME_IN('<'.charCodeAt(0), ScriptDataEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.24 Script data escaped end tag open state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-end-tag-open-state
                        BEGIN_STATE(ScriptDataEscapedEndTagOpen)
                        {
                            ON_ASCII_ALPHA
                            {
                                this.create_new_token(HTMLToken.Type.EndTag);
                                RECONSUME_IN(ScriptDataEscapedEndTagName);
                            }
                            ANYTHING_ELSE
                            {
                                TAG_START_TOKENS_1_2
                                RECONSUME_IN(ScriptDataEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.25 Script data escaped end tag name state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-end-tag-name-state
                        BEGIN_STATE(ScriptDataEscapedEndTagName)
                        {
                            ON_WHITESPACE
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (this.current_end_tag_token_is_appropriate())
                                    SWITCH_TO(BeforeAttributeName);

                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer) {
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                }
                                RECONSUME_IN(ScriptDataEscaped);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (this.current_end_tag_token_is_appropriate())
                                    SWITCH_TO(SelfClosingStartTag);

                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer) {
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                }
                                RECONSUME_IN(ScriptDataEscaped);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (this.current_end_tag_token_is_appropriate())
                                    SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);

                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer) {
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                }
                                RECONSUME_IN(ScriptDataEscaped);
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_current_builder.append_code_point(this.to_ascii_lowercase(current_input_character.value()));
                                this.m_temporary_buffer.append(current_input_character.value());
                                continue;
                            }
                            ON_ASCII_LOWER_ALPHA
                            {
                                this.m_current_builder.append(current_input_character.value());
                                this.m_temporary_buffer.append(current_input_character.value());
                                continue;
                            }
                            ANYTHING_ELSE
                            {
                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer) {
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                }
                                RECONSUME_IN(ScriptDataEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.26 Script data double escape start state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escape-start-state
                        BEGIN_STATE(ScriptDataDoubleEscapeStart)
                        {
                            let temporary_buffer_equal_to_script = () => {
                                if (this.m_temporary_buffer.size() != 6)
                                    return false;

                                // FIXME: Is there a better way of doing this?
                                return this.m_temporary_buffer[0] == 's'.charCodeAt(0) && this.m_temporary_buffer[1] == 'c'.charCodeAt(0) && this.m_temporary_buffer[2] == 'r'.charCodeAt(0) && this.m_temporary_buffer[3] == 'i'.charCodeAt(0) && this.m_temporary_buffer[4] == 'p'.charCodeAt(0) && this.m_temporary_buffer[5] == 't'.charCodeAt(0);
                            };
                            ON_WHITESPACE
                            {
                                if (temporary_buffer_equal_to_script())
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataDoubleEscaped);
                                else
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataEscaped);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                if (temporary_buffer_equal_to_script())
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataDoubleEscaped);
                                else
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataEscaped);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                if (temporary_buffer_equal_to_script())
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataDoubleEscaped);
                                else
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataEscaped);
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_temporary_buffer.append(this.to_ascii_lowercase(current_input_character.value()));
                                EMIT_CURRENT_CHARACTER;
                            }
                            ON_ASCII_LOWER_ALPHA
                            {
                                this.m_temporary_buffer.append(current_input_character.value());
                                EMIT_CURRENT_CHARACTER;
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(ScriptDataEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.27 Script data double escaped state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escaped-state
                        BEGIN_STATE(ScriptDataDoubleEscaped)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('-'.charCodeAt(0), ScriptDataDoubleEscapedDash);
                            }
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('<'.charCodeAt(0), ScriptDataDoubleEscapedLessThanSign);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                EMIT_CHARACTER(0xFFFD);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CURRENT_CHARACTER;
                            }
                        }
                        END_STATE

                        // 13.2.5.28 Script data double escaped dash state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escaped-dash-state
                        BEGIN_STATE(ScriptDataDoubleEscapedDash)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('-'.charCodeAt(0), ScriptDataDoubleEscapedDashDash);
                            }
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('<'.charCodeAt(0), ScriptDataDoubleEscapedLessThanSign);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                SWITCH_TO_AND_EMIT_CHARACTER(0xFFFD, ScriptDataDoubleEscaped);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataDoubleEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.29 Script data double escaped dash dash state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escaped-dash-dash-state
                        BEGIN_STATE(ScriptDataDoubleEscapedDashDash)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                EMIT_CHARACTER('-'.charCodeAt(0));
                            }
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('<'.charCodeAt(0), ScriptDataDoubleEscapedLessThanSign);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('>'.charCodeAt(0), ScriptData);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                SWITCH_TO_AND_EMIT_CHARACTER(0xFFFD, ScriptDataDoubleEscaped);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataDoubleEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.30 Script data double escaped less-than sign state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escaped-less-than-sign-state
                        BEGIN_STATE(ScriptDataDoubleEscapedLessThanSign)
                        {
                            ON('/'.charCodeAt(0))
                            {
                                this.m_temporary_buffer.clear();
                                SWITCH_TO_AND_EMIT_CHARACTER('/'.charCodeAt(0), ScriptDataDoubleEscapeEnd);
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(ScriptDataDoubleEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.31 Script data double escape end state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escape-end-state
                        BEGIN_STATE(ScriptDataDoubleEscapeEnd)
                        {
                            let temporary_buffer_equal_to_script = () => {
                                if (this.m_temporary_buffer.size() != 6)
                                    return false;

                                // FIXME: Is there a better way of doing this?
                                return this.m_temporary_buffer[0] == 's'.charCodeAt(0) && this.m_temporary_buffer[1] == 'c'.charCodeAt(0) && this.m_temporary_buffer[2] == 'r'.charCodeAt(0) && this.m_temporary_buffer[3] == 'i'.charCodeAt(0) && this.m_temporary_buffer[4] == 'p'.charCodeAt(0) && this.m_temporary_buffer[5] == 't'.charCodeAt(0);
                            };
                            ON_WHITESPACE
                            {
                                if (temporary_buffer_equal_to_script())
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataEscaped);
                                else
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataDoubleEscaped);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                if (temporary_buffer_equal_to_script())
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataEscaped);
                                else
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataDoubleEscaped);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                if (temporary_buffer_equal_to_script())
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataEscaped);
                                else
                                    SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataDoubleEscaped);
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_temporary_buffer.append(this.to_ascii_lowercase(current_input_character.value()));
                                EMIT_CURRENT_CHARACTER;
                            }
                            ON_ASCII_LOWER_ALPHA
                            {
                                this.m_temporary_buffer.append(current_input_character.value());
                                EMIT_CURRENT_CHARACTER;
                            }
                            ANYTHING_ELSE
                            {
                                RECONSUME_IN(ScriptDataDoubleEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.21 Script data escaped dash state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-dash-state
                        BEGIN_STATE(ScriptDataEscapedDash)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('-'.charCodeAt(0), ScriptDataEscapedDashDash);
                            }
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO(ScriptDataEscapedLessThanSign);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                SWITCH_TO_AND_EMIT_CHARACTER(0xFFFD, ScriptDataEscaped);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                SWITCH_TO_AND_EMIT_CURRENT_CHARACTER(ScriptDataEscaped);
                            }
                        }
                        END_STATE

                        // 13.2.5.20 Script data escaped state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-state
                        BEGIN_STATE(ScriptDataEscaped)
                        {
                            ON('-'.charCodeAt(0))
                            {
                                SWITCH_TO_AND_EMIT_CHARACTER('-'.charCodeAt(0), ScriptDataEscapedDash);
                            }
                            ON('<'.charCodeAt(0))
                            {
                                SWITCH_TO(ScriptDataEscapedLessThanSign);
                            }
                            ON(0)
                            {
                                this.log_parse_error();
                                EMIT_CHARACTER(0xFFFD);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CURRENT_CHARACTER;
                            }
                        }
                        END_STATE

                        // 13.2.5.16 Script data end tag open state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-end-tag-open-state
                        BEGIN_STATE(ScriptDataEndTagOpen)
                        {
                            ON_ASCII_ALPHA
                            {
                                this.create_new_token(HTMLToken.Type.EndTag);
                                RECONSUME_IN(ScriptDataEndTagName);
                            }
                            ANYTHING_ELSE
                            {
                                TAG_START_TOKENS_1_2
                                RECONSUME_IN(ScriptData);
                            }
                        }
                        END_STATE

                        // 13.2.5.17 Script data end tag name state, https://html.spec.whatwg.org/multipage/parsing.html#script-data-end-tag-name-state
                        BEGIN_STATE(ScriptDataEndTagName)
                        {
                            ON_WHITESPACE
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (this.current_end_tag_token_is_appropriate())
                                    SWITCH_TO(BeforeAttributeName);
                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer)
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                RECONSUME_IN(ScriptData);
                            }
                            ON('/'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (this.current_end_tag_token_is_appropriate())
                                    SWITCH_TO(SelfClosingStartTag);
                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer)
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                RECONSUME_IN(ScriptData);
                            }
                            ON('>'.charCodeAt(0))
                            {
                                this.m_current_token.set_tag_name(this.consume_current_builder());
                                if (this.current_end_tag_token_is_appropriate())
                                    SWITCH_TO_AND_EMIT_CURRENT_TOKEN(Data);
                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer)
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                RECONSUME_IN(ScriptData);
                            }
                            ON_ASCII_UPPER_ALPHA
                            {
                                this.m_current_builder.append_code_point(this.to_ascii_lowercase(current_input_character.value()));
                                this.m_temporary_buffer.append(current_input_character.value());
                                continue;
                            }
                            ON_ASCII_LOWER_ALPHA
                            {
                                this.m_current_builder.append(current_input_character.value());
                                this.m_temporary_buffer.append(current_input_character.value());
                                continue;
                            }
                            ANYTHING_ELSE
                            {
                                TAG_START_TOKENS_1_2
                                // NOTE: The spec doesn't mention this, but it seems that this.m_current_token (an end tag) is just dropped in this case.
                                this.m_current_builder.clear();
                                for (let code_point of this.m_temporary_buffer)
                                    this.m_queued_tokens.enqueue(HTMLToken.make_character(code_point));
                                RECONSUME_IN(ScriptData);
                            }
                        }
                        END_STATE

                        // 13.2.5.69 CDATA section state, https://html.spec.whatwg.org/multipage/parsing.html#cdata-section-state
                        BEGIN_STATE(CDATASection)
                        {
                            ON(']'.charCodeAt(0))
                            {
                                SWITCH_TO(CDATASectionBracket);
                            }
                            ON_EOF
                            {
                                this.log_parse_error();
                                EMIT_EOF;
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CURRENT_CHARACTER;
                            }
                        }
                        END_STATE

                        // 13.2.5.70 CDATA section bracket state, https://html.spec.whatwg.org/multipage/parsing.html#cdata-section-bracket-state
                        BEGIN_STATE(CDATASectionBracket)
                        {
                            ON(']'.charCodeAt(0))
                            {
                                SWITCH_TO(CDATASectionEnd);
                            }
                            ANYTHING_ELSE
                            {
                                EMIT_CHARACTER_AND_RECONSUME_IN(']'.charCodeAt(0), CDATASection);
                            }
                        }
                        END_STATE

                        // 13.2.5.71 CDATA section end state, https://html.spec.whatwg.org/multipage/parsing.html#cdata-section-end-state
                        BEGIN_STATE(CDATASectionEnd)
                        {
                            ON(']'.charCodeAt(0))
                            {
                                EMIT_CHARACTER(']'.charCodeAt(0));
                            }
                            ON('>'.charCodeAt(0))
                            {
                                SWITCH_TO(Data);
                            }
                            ANYTHING_ELSE
                            {
                                this.m_queued_tokens.enqueue(HTMLToken.make_character(']'.charCodeAt(0)));
                                this.m_queued_tokens.enqueue(HTMLToken.make_character(']'.charCodeAt(0)));
                                RECONSUME_IN(CDATASection);
                            }
                        }
                        END_STATE

                    default:
                        throw new Error("TODO()");
                    }
                }
            }
            if(this.m_goto_target==="_StartOfFunction") {
                this.m_goto_target="None";
                continue;
            } else {
                break;
            }
        }
        console.log("fallthrough", lp, this.m_goto_target);
        throw new Error("fallthrough");
    }
}
