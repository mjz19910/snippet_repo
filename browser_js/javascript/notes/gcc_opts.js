//spell:disable
let gcc_opts=`
-fno-branch-count-reg
-fno-defer-pop
-fno-fp-int-builtin-inexact
-fno-function-cse
-fno-guess-branch-probability
-fno-inline
-fno-math-errno
-fno-peephole
-fno-peephole2
-fno-printf-return-value
-fno-sched-interblock
-fno-sched-spec
-fno-signed-zeros
-fno-toplevel-reorder
-fno-trapping-math
-fno-zero-initialized-in-bss
-faggressive-loop-optimizations
-falign-functions[=n[:m:[n2[:m2]]]]
-falign-jumps[=n[:m:[n2[:m2]]]]
-falign-labels[=n[:m:[n2[:m2]]]]
-falign-loops[=n[:m:[n2[:m2]]]]
-fno-allocation-dce
-fallow-store-data-races
-fassociative-math
-fauto-profile
-fauto-profile[=path]
-fauto-inc-dec
-fbranch-probabilities
-fcaller-saves
-fcombine-stack-adjustments
-fconserve-stack
-fcompare-elim
-fcprop-registers
-fcrossjumping
-fcse-follow-jumps
-fcse-skip-blocks
-fcx-fortran-rules
-fcx-limited-range
-fdata-sections
-fdce
-fdelayed-branch
-fdelete-null-pointer-checks
-fdevirtualize
-fdevirtualize-speculatively
-fdevirtualize-at-ltrans
-fdse
-fearly-inlining
-fipa-sra
-fexpensive-optimizations
-ffat-lto-objects
-ffast-math
-ffinite-math-only
-ffloat-store
-fexcess-precision=style
-ffinite-loops
-fforward-propagate
-ffp-contract=style
-ffunction-sections
-fgcse
-fgcse-after-reload
-fgcse-las
-fgcse-lm
-fgraphite-identity
-fgcse-sm
-fhoist-adjacent-loads
-fif-conversion
-fif-conversion2
-findirect-inlining
-finline-functions
-finline-functions-called-once
-finline-limit=n
-finline-small-functions
-fipa-modref
-fipa-cp
-fipa-cp-clone
-fipa-bit-cp
-fipa-vrp
-fipa-pta
-fipa-profile
-fipa-pure-const
-fipa-reference
-fipa-reference-addressable
-fipa-stack-alignment
-fipa-icf
-fira-algorithm=algorithm
-flive-patching=level
-fira-region=region
-fira-hoist-pressure
-fira-loop-pressure
-fno-ira-share-save-slots
-fno-ira-share-spill-slots
-fisolate-erroneous-paths-dereference
-fisolate-erroneous-paths-attribute
-fivopts
-fkeep-inline-functions
-fkeep-static-functions
-fkeep-static-consts
-flimit-function-alignment
-flive-range-shrinkage
-floop-block
-floop-interchange
-floop-strip-mine
-floop-unroll-and-jam
-floop-nest-optimize
-floop-parallelize-all
-flra-remat
-flto
-flto-compression-level
-flto-partition=alg
-fmerge-all-constants
-fmerge-constants
-fmodulo-sched
-fmodulo-sched-allow-regmoves
-fmove-loop-invariants
-fmove-loop-stores
-fomit-frame-pointer
-foptimize-sibling-calls
-fpartial-inlining
-fpeel-loops
-fpredictive-commoning
-fprefetch-loop-arrays
-fprofile-correction
-fprofile-use
-fprofile-use=path
-fprofile-partial-training
-fprofile-values
-fprofile-reorder-functions
-freciprocal-math
-free
-frename-registers
-freorder-blocks
-freorder-blocks-algorithm=algorithm
-freorder-blocks-and-partition
-freorder-functions
-frerun-cse-after-loop
-freschedule-modulo-scheduled-loops
-frounding-math
-fsave-optimization-record
-fsched2-use-superblocks
-fsched-pressure
-fsched-spec-load
-fsched-spec-load-dangerous
-fsched-stalled-insns-dep[=n]
-fsched-stalled-insns[=n]
-fsched-group-heuristic
-fsched-critical-path-heuristic
-fsched-spec-insn-heuristic
-fsched-rank-heuristic
-fsched-last-insn-heuristic
-fsched-dep-count-heuristic
-fschedule-fusion
-fschedule-insns
-fschedule-insns2
-fsection-anchors
-fselective-scheduling
-fselective-scheduling2
-fsel-sched-pipelining
-fsel-sched-pipelining-outer-loops
-fsemantic-interposition
-fshrink-wrap
-fshrink-wrap-separate
-fsignaling-nans
-fsingle-precision-constant
-fsplit-ivs-in-unroller
-fsplit-loops
-fsplit-paths
-fsplit-wide-types
-fsplit-wide-types-early
-fssa-backprop
-fssa-phiopt
-fstdarg-opt
-fstore-merging
-fstrict-aliasing
-fipa-strict-aliasing
-fthread-jumps
-ftracer
-ftree-bit-ccp
-ftree-builtin-call-dce
-ftree-ccp
-ftree-ch
-ftree-coalesce-vars
-ftree-copy-prop
-ftree-dce
-ftree-dominator-opts
-ftree-dse
-ftree-forwprop
-ftree-fre
-fcode-hoisting
-ftree-loop-if-convert
-ftree-loop-im
-ftree-phiprop
-ftree-loop-distribution
-ftree-loop-distribute-patterns
-ftree-loop-ivcanon
-ftree-loop-linear
-ftree-loop-optimize
-ftree-loop-vectorize
-ftree-parallelize-loops=n
-ftree-pre
-ftree-partial-pre
-ftree-pta
-ftree-reassoc
-ftree-scev-cprop
-ftree-sink
-ftree-slsr
-ftree-sra
-ftree-switch-conversion
-ftree-tail-merge
-ftree-ter
-ftree-vectorize
-ftree-vrp
-ftrivial-auto-var-init
-funconstrained-commons
-funit-at-a-time
-funroll-all-loops
-funroll-loops
-funsafe-math-optimizations
-funswitch-loops
-fipa-ra
-fvariable-expansion-in-unroller
-fvect-cost-model
-fvpt
-fweb
-fwhole-program
-fwpa
-fuse-linker-plugin
-fzero-call-used-regs
--param name=value
-O
-O0
-O1
-O2
-O3
-Os
-Ofast
-Og
-Oz`;
let O1_opts=`-fauto-inc-dec
-fbranch-count-reg
-fcombine-stack-adjustments
-fcompare-elim
-fcprop-registers
-fdce
-fdefer-pop
-fdelayed-branch
-fdse
-fforward-propagate
-fguess-branch-probability
-fif-conversion
-fif-conversion2
-finline-functions-called-once
-fipa-modref
-fipa-profile
-fipa-pure-const
-fipa-reference
-fipa-reference-addressable
-fmerge-constants
-fmove-loop-invariants
-fmove-loop-stores
-fomit-frame-pointer
-freorder-blocks
-fshrink-wrap
-fshrink-wrap-separate
-fsplit-wide-types
-fssa-backprop
-fssa-phiopt
-ftree-bit-ccp
-ftree-ccp
-ftree-ch
-ftree-coalesce-vars
-ftree-copy-prop
-ftree-dce
-ftree-dominator-opts
-ftree-dse
-ftree-forwprop
-ftree-fre
-ftree-phiprop
-ftree-pta
-ftree-scev-cprop
-ftree-sink
-ftree-slsr
-ftree-sra
-ftree-ter
-funit-at-a-time`;
let optimize_option_groups=`-O
-O0
-O1
-O2
-O3
-Os
-Ofast
-Og
-Oz`;
let O2_opts=`-falign-functions
-falign-jumps
-falign-labels
-falign-loops
-fcaller-saves
-fcode-hoisting
-fcrossjumping
-fcse-follow-jumps
-fcse-skip-blocks
-fdelete-null-pointer-checks
-fdevirtualize
-fdevirtualize-speculatively
-fexpensive-optimizations
-ffinite-loops
-fgcse
-fgcse-lm
-fhoist-adjacent-loads
-finline-functions
-finline-small-functions
-findirect-inlining
-fipa-bit-cp
-fipa-cp
-fipa-icf
-fipa-ra
-fipa-sra
-fipa-vrp
-fisolate-erroneous-paths-dereference
-flra-remat
-foptimize-sibling-calls
-foptimize-strlen
-fpartial-inlining
-fpeephole2
-freorder-blocks-algorithm=stc
-freorder-blocks-and-partition
-freorder-functions
-frerun-cse-after-loop
-fschedule-insns
-fschedule-insns2
-fsched-interblock
-fsched-spec
-fstore-merging
-fstrict-aliasing
-fthread-jumps
-ftree-builtin-call-dce
-ftree-loop-vectorize
-ftree-pre
-ftree-slp-vectorize
-ftree-switch-conversion
-ftree-tail-merge
-ftree-vrp
-fvect-cost-model=very-cheap`;
let O3_opts=`-fgcse-after-reload
-fipa-cp-clone
-floop-interchange
-floop-unroll-and-jam
-fpeel-loops
-fpredictive-commoning
-fsplit-loops
-fsplit-paths
-ftree-loop-distribution
-ftree-partial-pre
-funswitch-loops
-fvect-cost-model=dynamic
-fversion-loops-for-strides`;
let Os_opts=`-falign-functions
-falign-jumps
-falign-labels
-falign-loops
-fprefetch-loop-arrays
-freorder-blocks-algorithm=stc`;
let fast_optimize=`-ffast-math
-fallow-store-data-races
-fstack-arrays
-fmax-stack-var-size
-fno-protect-parens
-fsemantic-interposition`;
let Og_opts=`-fbranch-count-reg
-fdelayed-branch
-fdse
-fif-conversion
-fif-conversion2
-finline-functions-called-once
-fmove-loop-invariants
-fmove-loop-stores
-fssa-phiopt
-ftree-bit-ccp
-ftree-dse
-ftree-pta
-ftree-sra`;
//spell:enable

/** @arg {Set<string>} base @arg {string} base_ext_string */
function remove_flags_from(base,base_ext_string) {
	for(let i of base_ext_string.split(/\s+/)) {
		base.delete(i);
	}
}
let gcc_set=new Set(gcc_opts.split(/\s+/));
remove_flags_from(gcc_set,optimize_option_groups);
remove_flags_from(gcc_set,O1_opts);
remove_flags_from(gcc_set,O2_opts);
remove_flags_from(gcc_set,O3_opts);
remove_flags_from(gcc_set,Os_opts);
remove_flags_from(gcc_set,fast_optimize);
remove_flags_from(gcc_set,Og_opts);

console.log(gcc_set);
import {start} from "repl";

const gcc_all_opts=gcc_opts.split(/[ ][ ]+|\n/).sort();

console.log(gcc_all_opts.slice(0,50));
console.log(gcc_all_opts.slice(50,100));
console.log(gcc_all_opts.slice(100,150));
console.log(gcc_all_opts.slice(150));

let repl_=start("> ");

repl_.context.gcc_set=gcc_set;
