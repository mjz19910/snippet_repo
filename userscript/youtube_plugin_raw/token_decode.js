let token="Eg0SCzh6aWxFZ19mZVpBGAYy9wcKzAdnZXRfcmFua2VkX3N0cmVhbXMtLUNvUUZDSUFFRlJlMzBUZ2EtUVFLOHdRSTJGOFFnQVFZQnlMb0JBTTJJbEpkeGZDQ3dTVE85V0h4bk92LXdtMHJKLVhRN0g3b0pRMk0tS0JuN1BPMWVPZnMxamUyWERqNTc4cVhka2VkMXVPeW9BMHZxNUwwcF9uVGowRzQyNWVncXhtM1k1SjdTWUpISmJuMzIyVWx6WXRHZWN1YnBoc2ZIOEl3dXB2SmV6M0o2blZ0LXJ4MHB1NDZHYzNETDRVU2ZlVkRvRmFHRW92UmJGc3l5d01OdkpzVjBlSkNIcVVVa1NrNG5sWlI2bE45akNtSkZPU1JTb3hLVXRhSFJOcjJKS1hkVldaOXpjcXBHNm5jdEY5VE83d21uOW9ZcHBmcGotNGtQazlEbjBZeEo1RlpnMXpxcFhBYnVQV0pzZmhRNDlKTTRpX3JzTHdqYVNrbGV2d3lxWG1JZnRub2NpbVhvWmRKaTloazQ1SkpoMFhDaHRRMVAwUUt1Wi05dXhSYWhTNHFVMWRwLWVPX2hZZWZEUHViV1lnUElhZUpmMXkteU9JaU1XUjNLaE9Xd2RfbFVYcXlfNVBlRUNXZms4Uzh0TnRmbTZqY2NmRjktU3BiTU5NWlAwd3hZVG5xdVkxbEdqTFNQVW5yd3lSdmtTU2ZCN1E2VDlacWxlX3hPek1aajB1STVFWmJiaEh2VXg3T1VTLUhSOGM5eDlIa1pmT2MtdzFibDI5MVRibVZjV1g1ZUE2MllJczhjTW4yUV9vaWVKTWxGMjJQa1loWXpxWjVzaTlPQjktU0J0ZDlXVU1ZZnFsVl9vQ3JDOHVEdWhaUnRXbGZwY21rUnNkQkZwM3gtSmFvTmJlTXRMUG1mTEFvOVdoNmZEbHMyOHYzcmo2RUJRWEowSU5FRFAxWHRUcDRKMllsRFNfREFYTTVuWFQyNVhtcEpZVHBsRXJmcTlRRmQ1TlJ4SW5UdnNUUGxDSmVHdE9nd2xMNWtHZ01TOE5IajF6eGR1RHBoX2lhUTVMelAzMUhuRnRJTTN1M3JZbGJYYUppX0JKRVNJNXN2MlhMYm93aXZJMFNSVjdITHBjWmhYVzRVakNaNlVMLWJjUjBiQ3FxSGtST3FFZThfVUs0WVlsTjQyejRjQUVRakFFU0J3aWZJQkFBR0FBU0JRaUpJQmdBRWdnSWhTQVFqQUVZQVJJRkNJZ2dHQUFTQndpRUlCQXdHQUVTQlFpSElCZ0FFZ2NJbHlBUWNoZ0JFZ1VJaGlBWUFCZ0IiESILOHppbEVnX2ZlWkEwAHgBKIwBQhBjb21tZW50cy1zZWN0aW9u";
token=`
--
Eg0SCzh6aWxFZ19mZVpBGAYyrgoKgwpnZXRfcmFua2VkX3N0cmVhbXMtLUN1d0dDSUFFRlJlMzBUZ2E0UVlLMndZSTJGOFFnQVFZQnlMUUJnTTJFU0xWVWNSd0NJSXVKc1ZpcWt0blNXaFZzdk4tWTdhZ1dveVhvaHlVN1Y1YjhKSVNNNkpmdEM1SUxJVGRoLXJrSFVtTFd4LU1MUmRPaGhyUVFpQVpsQ190ampxdFI2d0xHdVZEYVNxb0pOMTd4RW0tbEc4cUpFamRaSjBrNkdyR0ZvNUpwSFF1UlFTUFNuTHZCNU5EcUtRVXlVU1NVWlMzZ3JKcG9sR1JlcDJ5eTZEZDNVekdqRkkzbDlWcnFFM0R1Vk5uaWlTdWs5RThsS3B6b1VULVNHWTRNbEV3cHk0bEZxUFpObEUweTRQSXdMdFpFWlRpUWk1TjJDU0lURXhPZEZMQ0pFcEpwM3FJNmtTY1JBcnlTTVUxS29rRW1jaXVnVWhaS1pZa3BVMVZ4R1RXVzhxcVFxR2hrY3BOTy0tSmltTGh1VEN5VDIwTVU1OHkwdW5CblFUTmFKa3l1WXVqeXlaQ1RpS3pFYkhZWE1OU1dCSmxia2tYWVRSQ2wwNU5MSGhxSm5GNXdCS0dTQ1R2U0ZwS29lUW00VXNwYWg0Uy1haGlYQWpYS0xGY3FGbmhNZ2tXTWExV21qUkJpcVNVRzB0QXlVUVVUYTNkSlpJYU1Vcy1vUmN6bDBLcmtBNUVLbE5YY1d3MjJfYW5FdHluLTJiWTM4eEN0RHFFbkNiR0gwTDVJaHpNUlZ5RE5YY3FFeG9Qamc4bUY1SWdEWlBKLVZLNW9kNFFSY3M1aVd1T1NoSnV3aWZjeUpxbzNFMmlPaTlZdjZDb0JBMW1SckxpS1NOS3NaTFEtQ2g0YnB1UWN4d3dJV25GUWtFYTFXR1NveHNiU2VCaTA0RG1QQWNLMXNpeHltTmpfczVJSXNZNExDR2dpQnRoZDI4UjVUd0ZsWUVueHFDWFZta3M2b2hiVmg5TjhxYlpjNlJPTlNDMkxrbm9MSEZOdVJXdm9iS2NwdDRSVFl4WnNFVWV1R1Q3SVcyTXhDZ21NcU1zSElwS3Fuc3hJbUtKSEUwUTAwRDJ4V2x4TjIxU05ManV5eHJDTU45cWxWOGNWMUpoZVZEWElxbzI3WU9Sb0V0SWFuUjBZMWxVUWlVcW1zdXBDTFZnYmhJRktSZldiTzFnVGFUU3FtYmtMYjFRc0xaTkVtV01wNUpVSFdOWWlBU0poTWlETUdQb0wxMVFqUndINTBMTVNvTGhKZkVCYzdrSXA2UmV5WmR0ODZSQlFnZ2NUNnFGcXN4VktqZTBTY1FrczRpVFdiS0pGa28zWXdxVUl0WkloWkFTcTdCVWpwUVNGZVd3TkZ5N094a0h4YkMxeWdPOW1yZzZjNUtFT1RCS21MbmRoRkloRG5mRW1VcElNNk1GSmR1YXVHRlpvbUo4UlRVUmtyS3gzY2RzMlVsWVRJUnBHU1dLYUN0eDdJS2h5b3JDT3RDTmdzbWl4QnU1ekJNaFpVeS1vQVVWVlE4aUYwSDFHckFOTFdWTWhCdVdSRTBwVFVTR0Q0VVRFTndCRWdjSWhDQVFQUmdCRWdVSWlDQVlBQklJQ0lVZ0VOd0JHQUVTQlFpSklCZ0FFZ2NJbnlBUUFCZ0FFZ1VJaGlBWUFCSUlDSmNnRUtJQkdBRVNCUWlISUJnQUdBRSIRIgs4emlsRWdfZmVaQTAAeAEo3AFCEGNvbW1lbnRzLXNlY3Rpb24%3D
--
Eg0SCzh6aWxFZ19mZVpBGAYyJSIRIgs4emlsRWdfZmVaQTAAeAJCEGNvbW1lbnRzLXNlY3Rpb24%3D
--
CCgSJRILOHppbEVnX2ZlWkEyAMgBAOABA6ICDSj___________8BQAAYACqnDDJzNkw2d3lXQ1FxVENRb0Q4ajRBQ2czQ1Bnb0lpLW1laTlLOXZzSkxDZ1B5UGdBS0RjSS1DZ2pib0xYSGs5YWQwbThLQV9JLUFBb093ajRMQ09xNHlJYUJqSXkwdlFFS0FfSS1BQW9Od2o0S0NMV29rNjJkcnFiUUlRb0Q4ajRBQ2c3Q1Bnc0kycDJDdHJ5ZXBLTEhBUW9EOGo0QUNnN0NQZ3NJNHNHTjd0bXpxdnVYQVFvRDhqNEFDZzdDUGdzSWc5dkh1UExSa1l2WUFRb0Q4ajRBQ2czQ1Bnb0l0UHlLNnJfZWlkbDJDZ1B5UGdBS0RjSS1DZ2l4cTctOXJlaUE4ellLQV9JLUFBb053ajRLQ0pYZjdmU3N6dEh6ZndvRDhqNEFDZzNDUGdvSXBwMnoxdU9uM09RbUNnUHlQZ0FLRHNJLUN3aXZzc21fbk9fU2lhWUJDZ1B5UGdBS0RzSS1Dd2k3djdQUm1xVDVxcWtCQ2dQeVBnQUtEY0ktQ2dqQ182dWZyTjNkOWxnS0FfSS1BQW9Od2o0S0NLRGMydUdlOThpZ2J3b0Q4ajRBQ2c3Q1Bnc0loLWJFOW82Tms3U3hBUW9EOGo0QUNpZlNQaVFLSWxCTVNGUm9NVWx1YUdoM1ZEWmpNa3BPZEZWcFNtdGhTRGhaVW5GNmFGVTNRV2NLQV9JLUFBb093ajRMQ1BILTJKMkNfcW5GaFFFS0FfSS1BQW9Pd2o0TENMN3hqdm41OW9uaHpRRUtBX0ktQUFvTndqNEtDSld0eC03WXJwZXpZQW9EOGo0QUNnN0NQZ3NJanJpdXdyblJ6TnpyQVFvRDhqNEFDZzdDUGdzSTI5dnowZHZyOF9tT0FRb0Q4ajRBQ2c3Q1Bnc0lfTWljcXB1THlJT3dBUW9EOGo0QUNnM0NQZ29JNUpLX3BvdW5qdTl6Q2dQeVBnQUtEc0ktQ3dpR2dyQ2UyTGpQazYwQkNnUHlQZ0FLRHNJLUN3aUFzNm5EdWFuWF9MRUJDZ1B5UGdBS0RjSS1DZ2owNnNpWHc3V25zRUlLQV9JLUFBb093ajRMQ05MSzh2SDd5X2JkNEFFS0FfSS1BQW9Pd2o0TENLM1c4dWpEdUlQUXNRRUtBX0ktQUFvTndqNEtDT3FMM1plcDQ3Nk1TUW9EOGo0QUNnN0NQZ3NJM0xQWjJiZm1oNTdoQVFvRDhqNEFDZzNDUGdvSWtKdm9rNFRKZ09oLUNnUHlQZ0FLRGNJLUNnaW56N3JQdm9lb3cxa0tBX0ktQUFvTndqNEtDTURCb3F5RHplekJTZ29EOGo0QUNnM0NQZ29JNFlPQnM0aVpqY0p3Q2dQeVBnQUtEY0ktQ2dqYng2ZkQyYUNaMkhVS0FfSS1BQW9Pd2o0TENMV2l5NV9kNlkzVjhBRUtBX0ktQUFvT3dqNExDTVcybnNXRG5yZkRfUUVLQV9JLUFBb093ajRMQ0xiZXVNbUsxOVN5OEFFS0FfSS1BQW9Pd2o0TENMWGNxdjNwcmQyd3lnRVNLQUFDQkFZSUNnd09FQklVRmhnYUhCNGdJaVFtS0Nvc0xqQXlORFk0T2p3LVFFSkVSa2hLVEU0YUJBZ0FFQUVhQkFnQ0VBTWFCQWdFRUFVYUJBZ0dFQWNhQkFnSUVBa2FCQWdLRUFzYUJBZ01FQTBhQkFnT0VBOGFCQWdRRUJFYUJBZ1NFQk1hQkFnVUVCVWFCQWdXRUJjYUJBZ1lFQmthQkFnYUVCc2FCQWdjRUIwYUJBZ2VFQjhhQkFnZ0VDRWFCQWdpRUNNYUJBZ2tFQ1VhQkFnbUVDY2FCQWdvRUNrYUJBZ3FFQ3NhQkFnc0VDMGFCQWd1RUM4YUJBZ3dFREVhQkFneUVETWFCQWcwRURVYUJBZzJFRGNhQkFnNEVEa2FCQWc2RURzYUJBZzhFRDBhQkFnLUVEOGFCQWhBRUVFYUJBaENFRU1hQkFoRUVFVWFCQWhHRUVjYUJBaElFRWthQkFoS0VFc2FCQWhNRUUwYUJBaE9FRThxS0FBQ0JBWUlDZ3dPRUJJVUZoZ2FIQjRnSWlRbUtDb3NMakF5TkRZNE9qdy1RRUpFUmtoS1RFNGoPd2F0Y2gtbmV4dC1mZWVkcgA%3D
--
Eg0SCzh6aWxFZ19mZVpBGAYypAcK-gZnZXRfcmFua2VkX3N0cmVhbXMtLUNzY0VDSUFFRlJlMzBUZ2F2QVFLdHdRSTJGOFFnQVFZQnlLc0JBTTJJdGRWREM4WVRPSmNIeGJQdF8yOWJlV2t2Tm45aHpRd1B1b1otMl9EbXQzNnhYWk9fcnZ5cGQxUnAxLVdCVzE0V1pXa1BfM0RINFg3anljemJzY2s5NUlFajByeS1YWlpTZThhNVMxdm1tNzh4ekNNN21ieVhrLXlmbW42dlBUZGRUS2FoMThLSmZyS2gwRHRzaFk3MkpZNER6VHZab1dMQzIxU2lzZ1VIRS1yS1BXcFBzWlJaSnRMakVwU2ZrMmtiVTlTMmwzbEg3Snlta2pscHYyNl9qWDUxTVl3dlV4X2RDZTVUa09mUmpFbmtUbGY2cVczdWZWajhhSEdvMG44NTJINVJscEsyZUtYU2MzRGR0bm9jaW1YNFRCcHdXbGZNdW13U05odzBmd1FhZTVuN3k2RlZybnAxbFZhX3ZqZl9sZnNiMlloUG9TY3BqOHRueFlYaVNIN05PSEYzLVZSZXJMXy13MVI4cm5GdkxUX1F4Ty00M0pldnNyVzdJWWZwcGpMVWM5dExOT1o3NjMxSjNtTEpQazg0REJQMW1xVjdfRTdzX0o0aWVSR1c5N3hQdVhoSFBWeWVIVGNjeHhOWHJZMTl4dTJMdF9xZWhpX3NIdzh0NlZISG5pM0g5SVh3WnNzdVF3X0VCSEwyVFJQOXNYcDRGdXFyaF9XRVA1dmY4SFZoZVZCWTJHMWFaLWJUUG95eUtJekh0OWlhMjRaYVdjOUhxeldvLW54NWJCdEw5LTctbkJCUVRMMFVESDBYOVhxNEoyWWxmVExjSmpLNmFTekw4OUxMU0ZNcDYzdlZlcUNPNDdreEdsZjRtZEtFUy1OYVZCaHFmeEVZMWdhUHZvZGJ3ZWVmb2l2T1NRNV85TjN4TG1GTkxOMzI1cTQxU1hxOENXSTBKWHR0MnpaTFlud05rcDlIcnRjWmhUVzRVb0JaN3FRZnhzeEhSdHJEQ0tuMV9zdkZ5eXg2U3MtWEFBUWVCSUhDSVVnRUhnWUFSSUhDSjhnRUFBWUFCSUZDSWtnR0FBU0J3aUVJQkF0R0FFU0JRaUlJQmdBRWdVSWh5QVlBQklGQ0lZZ0dBQVNCd2lYSUJCakdBRVlBUSIRIgs4emlsRWdfZmVaQTAAeAEoeEIQY29tbWVudHMtc2VjdGlvbg%3D%3D
`.split("--").at(-1)?.trim() ?? "";
const text=atob(decodeURIComponent(token).replaceAll("_","/").replaceAll("-","+"));
const binary=new Uint8Array([...text].map(e => e.charCodeAt(0)));
const string_decoder=new TextDecoder('utf-8');
/**
 * @param {Uint8Array} binary
 * @returns {[[number,number,typeof decoded],Uint8Array]}
 */
function decode_type_18_depth_0(binary) {
	let [type,length_]=binary;
	let rest=binary.subarray(2);
	let decoded=decode_str_tlv(rest.subarray(0,length_));
	/** @type {[number,number,typeof decoded]} */
	let data=[type,length_,decoded];
	return [data,rest.subarray(length_)];
}
/**
 * @param {Uint8Array} binary
 * @returns {[number,string]}
 */
function decode_str_tlv(binary) {
	let [type,length_]=binary;
	let rest=binary.subarray(2);
	let data=rest.subarray(0,length_);
	let str=string_decoder.decode(data);
	return [type,str];
}
/**
 * @param {Uint8Array} binary
 * @returns {[number,Uint8Array]}
 */
function decode_tlv(binary) {
	let [type,length_]=binary;
	let rest=binary.subarray(2);
	let data=rest.subarray(0,length_);
	return [type,data];
}
/**
 * @param {Uint8Array} binary
 */
function run(binary) {
	let parts=[];
	x: for(let i=0;;) {
		switch(binary[i]) {
			case 0x18: {
				let part_len=binary[i+1];
				let part_off=i+2;
				parts.push([binary.subarray(i,part_off),binary.subarray(part_off,part_off+part_len)]);
				i=part_off+part_len;
			} break x;
			case 0x08:
			case 0x12: {
				let part_len=binary[i+1];
				let part_off=i+2;
				parts.push([binary.subarray(i,part_off),binary.subarray(part_off,part_off+part_len)]);
				i=part_off+part_len;
			} break;
			default: console.log("0x"+binary[i].toString(16),binary.subarray(i,i+32)); break x;
		}
	}
	let [result,_rest]=decode_type_18_depth_0(binary);
	console.log(result);
	// console.log('decode run',result,[[[rest]]],encodeURIComponent(text.slice(0,rest.byteOffset)),encodeURIComponent(text.slice(rest.byteOffset)));
	console.log(parts);
}
run(binary);
